name: Master/Release Branch Build
on:
  push:
    branches:
      - master
    secrets:
      GH_PAT:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        go-version: [~1.19]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Use Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        id: go
      - name: Cache ~/.npm
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-${{ matrix.node-version }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-node-
      - name: Install npm Dependencies
        run: npm ci
      - name: Cache ./node_modules/.cache for nx usage
        uses: actions/cache@v2
        with:
          path: ./node_modules/.cache
          key: ${{ runner.os }}-${{ matrix.node-version }}-node-cache-${{ hashFiles('./*.json') }}-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-node-cache-${{ hashFiles('./*.json') }}
            ${{ runner.os }}-${{ matrix.node-version }}-node-cache-
      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Lint
        shell: bash
        run: |
          npm run prettier-check
          npm run affected:lint -- --base=origin/master --head=$GITHUB_SHA --parallel
      - name: Build All
        shell: bash
        run: |
          npm run build-all
      - name: Test
        shell: bash
        run: |
          npm run affected:test -- --base=origin/master --head=$GITHUB_SHA --parallel
          npm run affected:e2e -- --base=origin/master --head=$GITHUB_SHA --parallel
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ secrets.AWS_REGION_DEV }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Compute short sha
        id: shortsha
        env:
          FULL_SHA: ${{ github.sha }}
        run: echo "GITSHA=`echo ${FULL_SHA} | cut -c1-8`" >> $GITHUB_ENV
      - name: Docker Build, Tag, and Push to ECR
        id: dockerize
        env:
          IMAGE_TAG: ${{ steps.login-ecr.outputs.registry }}/uesio:${{ github.sha }}
          FULL_SHA: ${{ github.sha }}
        run: |
          mkdir artifacts
          echo "$IMAGE_TAG" > ./artifacts/new_image.txt
          echo "$GITSHA" > ./artifacts/short_sha.txt
          docker build -t $IMAGE_TAG -t $GITSHA -f ./apps/platform/Dockerfile --build-arg GITSHA .
          docker push $IMAGE_TAG
      - name: Upload image id
        uses: actions/upload-artifact@v3
        with:
          name: image-artifacts
          path: |
            artifacts
      - name: Add studio subdomain to /etc/hosts
        run: |
          sudo echo "127.0.0.1 studio.uesio-dev.com" | sudo tee -a /etc/hosts
      - name: Run End-to-End tests against app image in Docker
        run: |
          bash ./run-e2e-tests.sh
  update-dev-branch:
    name: Update Dev environment to latest image
    if: github.ref_name == 'master'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          repository: thecloudmasters/uesio-infra
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
      - name: Download image id artifact
        uses: actions/download-artifact@v3
        with:
          name: image-artifacts
      - name: Load new image into env var
        run: |
          echo "NEW_IMAGE=$(cat ./new_image.txt)" >> $GITHUB_ENV
          echo "SHORT_SHA=$(cat ./short_sha.txt)" >> $GITHUB_ENV
      - name: Update Docker container image tag for dev
        env:
          appTaskDefPath: ./aws/dev/ecs/task_definitions/uesio_web.json
          workerTaskDefPath: ./aws/dev/ecs/task_definitions/uesio_worker.json
        run: |
          echo "Docker image SHA updated to $SHORT_SHA"
          jq --arg img "$NEW_IMAGE" '.containerDefinitions[0].image = $img' $appTaskDefPath > tmp1.json
          jq --arg img "$NEW_IMAGE" '.containerDefinitions[0].image = $img' $workerTaskDefPath > tmp2.json
          mv tmp1.json $appTaskDefPath
          mv tmp2.json $workerTaskDefPath
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add $appTaskDefPath $workerTaskDefPath
          git commit -m "ci: Auto-update dev image to $SHORT_SHA"
          git push
