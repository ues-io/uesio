name: Uesio Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

env:
  GO_CACHE_INFO_FILE: wf-go-cache-info.txt

jobs:
  docker_publish_to_ghcr:
    name: Publish to GitHub Container Registry
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting a OIDC JWT for AWS
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ECR_ROLE_DEV }}
          role-session-name: ecrpull
          aws-region: ${{ secrets.AWS_REGION_DEV }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull the latest Docker image from ECR
        env:
          SHA_TAG: ${{ github.sha }}-latest
          ECR_REGISTRY_ID: ${{ secrets.AWS_ACCOUNT_ID_DEV }}
          ECR_REGISTRY_URI: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: uesio
          GHCR_IMAGE_TAG_BASE: ghcr.io/${{ github.repository }}
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          # Make sure that the Docker image for this commit exists in ECR
          IMAGE_EXISTS=$(bash ./scripts/ecr-image-exists.sh $ECR_REGISTRY_ID $ECR_REPOSITORY_NAME $SHA_TAG)

          if [[ "$IMAGE_EXISTS" == "no" ]]; then
              echo "Docker image does not exist in ECR for tag $SHA_LATEST_TAG"
              exit 1
          fi

          ECR_SHA_TAG=${ECR_REGISTRY_URI}/${ECR_REPOSITORY_NAME}:${SHA_TAG}
          echo "Pulling Docker image $ECR_SHA_TAG from ECR..."
          docker pull $ECR_SHA_TAG

          echo "Pushing tag $GHCR_IMAGE_TAG_BASE to Github Container Registry..."=
          docker tag $ECR_SHA_TAG $GHCR_IMAGE_TAG_BASE:$RELEASE_TAG
          docker tag $ECR_SHA_TAG $GHCR_IMAGE_TAG_BASE:latest
          docker push --all-tags $GHCR_IMAGE_TAG_BASE

  cli_release_artifacts:
    name: Build asset for ${{ matrix.goos }} - ${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: uesio-linux
            asset_name: uesio-linux-amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: uesio.exe
            asset_name: uesio-windows-amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: uesio-macos-amd64
            asset_name: uesio-macos-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: uesio-macos-arm64
            asset_name: uesio-macos-arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # https://github.com/actions/setup-go/issues/358 - cache is shared across jobs by default since the dependency
      # graph is the same, however each job results in different dependencies being downloaded and the first one
      # to finish wins with regards to saving the cache.  To workaround, we create a file to include in the graph
      # that contains information specified to the workflow & job so that each job gets a separate go cache.
      # Note that the cache key used (https://github.com/actions/setup-go/blob/main/src/cache-restore.ts#L35) by
      # actions/setup-go is already platform/arch/go-version specific so we only need to further differentiate
      # by workflow and job.
      - name: Create go cache info file
        run: echo "go-cache-${{ github.workflow }}-${{ github.job }}" > ${GO_CACHE_INFO_FILE}

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: |
            apps/*/go.sum
            go.work.sum
            ${{ env.GO_CACHE_INFO_FILE }}

      - name: Build CLI
        shell: bash
        env:
          outputPath: "dist/bin/${{ matrix.artifact_name }}"
        run: |
          cd apps/cli
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o $outputPath
          cd ../..

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.artifact_name }}
          path: |
            apps/cli/dist/bin/${{ matrix.artifact_name }}

  upload_release_binaries:
    name: Upload binaries to release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [cli_release_artifacts]
    steps:
      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
          pattern: binaries-*
          merge-multiple: true

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: binaries/*
          fail_on_unmatched_files: true
