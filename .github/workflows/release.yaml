name: Uesio Release

on:
  push:
    tags:
      - "v*"
    secrets:
      AWS_ACCOUNT_ID_DEV:
        required: true
      AWS_ECR_ROLE_DEV:
        required: true
      AWS_REGION_DEV:
        required: true

# Request permissions to be able to create releases
permissions:
  id-token: write # Needed to assume role using AWS OIDC provider
  actions: write # Access to Github actions
  contents: write # This is required for actions/checkout

jobs:
  docker_publish_to_ghcr:
    name: Publish to GitHub Container Registry
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ECR_ROLE_DEV }}
          role-session-name: ecrpull
          aws-region: ${{ secrets.AWS_REGION_DEV }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Pull the latest Docker image from ECR
        shell: bash
        env:
          FULL_SHA: ${{ github.sha }}
          REGISTRY_ID: ${{ secrets.AWS_ACCOUNT_ID_DEV }}
          IMAGE_TAG: ${{ steps.login-ecr.outputs.registry }}/uesio:${{ github.sha }}
          GHCR_IMAGE_TAG_BASE: ghcr.io/${{ github.repository }}
          RELEASE_TAG: ${{ github.ref_name }}
        run: |

          # Make sure that the Docker image for this commit exists in ECR
          image_exists=$(bash ./scripts/ecr-image-exists.sh $REGISTRY_ID uesio $FULL_SHA)

          if [[ "$image_exists" == "no" ]]; then
              echo "Docker image does not exist in ECR"
              exit 1
          fi

          echo "Pulling Docker image from ECR..."
          docker pull $IMAGE_TAG
          echo "Pushing tag $RELEASE_TAG to Github Container Registry..."=
          docker tag $IMAGE_TAG $GHCR_IMAGE_TAG_BASE:$RELEASE_TAG
          docker push $GHCR_IMAGE_TAG_BASE:$RELEASE_TAG
          echo "Pushing latest tag to Github Container Registry..."
          docker tag $IMAGE_TAG $GHCR_IMAGE_TAG_BASE:latest
          docker push $GHCR_IMAGE_TAG_BASE:latest
  cli_release_artifacts:
    name: Build asset for ${{ matrix.goos }} - ${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: uesio-linux
            asset_name: uesio-linux-amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: uesio.exe
            asset_name: uesio-windows-amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: uesio-macos-amd64
            asset_name: uesio-macos-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: uesio-macos-arm64
            asset_name: uesio-macos-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.4
          cache-dependency-path: apps/*/go.sum
      - name: Build CLI
        shell: bash
        env:
          outputPath: "dist/bin/${{ matrix.artifact_name }}"
        run: |
          cd apps/cli
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o $outputPath
          cd ../..
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.artifact_name }}
          path: |
            apps/cli/dist/bin/${{ matrix.artifact_name }}
  upload_release_binaries:
    name: Upload binaries to release
    runs-on: ubuntu-latest
    needs:
      - cli_release_artifacts
    steps:
      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: binaries
          pattern: binaries-*
          merge-multiple: true
      - name: Upload release artifacts
        uses: Roang-zero1/github-upload-release-artifacts-action@v2
        with:
          args: "binaries/uesio.exe binaries/uesio-macos-amd64 binaries/uesio-macos-arm64 binaries/uesio-linux"
          created_tag: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
