name: CI
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore: [".vscode/**", "**/*.md"] # TODO: Verify no md files are used in bundles, etc.
  merge_group:
  pull_request:
    branches: [main]
    # Note - Ignore is not commit specific, if any file in the PR is outside of this list, workflow will run, see https://github.com/orgs/community/discussions/25161#discussioncomment-3246673
    paths-ignore: [".vscode/**", "**/*.md"] # TODO: Verify no md files are used in bundles, etc.

# Automatically cancel in-progress actions on the same branch except for main
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: 22.13.0

jobs:
  build:
    name: Check, build and test
    runs-on: ubuntu-latest
    outputs:
      gitsha: ${{ steps.setDockerSHAs.outputs.gitsha }}
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: setNxSHAs
        uses: nrwl/nx-set-shas@v4

      - name: Ensure tracking against main
        run: git branch --track main origin/main
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.work
          cache-dependency-path: |
            apps/*/go.sum
            go.work.sum

      - name: Install NPM dependencies
        run: npm ci

      - name: Check formatting
        env:
          UESIO_DEV: "true"
        run: npx nx format:check --verbose

      - name: Lint, test, build
        env:
          UESIO_DEV: "true"
        run: npx nx affected -t lint test build typecheck --configuration=ci --parallel=5

      - name: Prep for docker image
        id: setDockerSHAs
        env:
          UESIO_DEV: "true"
        run: |
          # We lint/test/build affected but in order to build image, we need to ensure everything
          # is built.  Build anything that hasn't been built yet (takes advantage of nx cache
          # for anything already built from above)
          npx nx run-many -t build --all
          echo "GITSHA=`echo $(echo ${{ steps.setNxSHAs.outputs.head }} | cut -c1-8)-${{ github.run_number }}-${{ github.run_attempt }}`" >> "$GITHUB_OUTPUT"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: |
            type=raw,value=${{ steps.setDockerSHAs.outputs.gitsha }}
            type=ref,event=branch
            type=ref,event=pr

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to docker
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          file: ./apps/platform/Dockerfile
          build-args: |
            GITSHA=${{ steps.setDockerSHAs.outputs.gitsha }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Integration and e2e tests
        env:
          GITSHA: ${{ steps.setDockerSHAs.outputs.gitsha }}
        run: |
          ./scripts/seed-etc-hosts.sh

          # install hurl for debian. Using the NPM package has SSL issues with node-keytar... really frustrating
          # Make sure we're using the same Hurl version specified in package.json
          hurlversion=$(bash ./scripts/get-hurl-version.sh)
          echo "Installing hurl $hurlversion for Debian..."
          curl -LO https://github.com/Orange-OpenSource/hurl/releases/download/${hurlversion}/hurl_${hurlversion}_amd64.deb
          sudo apt update && sudo apt install ./hurl_${hurlversion}_amd64.deb

          # Start up the Uesio app, and dependencies, in Docker
          # then run all Integration and E2E tests against the app
          npm run tests-ci
